use color_eyre;
use mlua::prelude::*;
use tokio;

pub mod error;
pub mod http;
pub mod server;

#[mlua::lua_module]
fn kimyo(lua: &Lua) -> LuaResult<LuaTable> {
    color_eyre::install().unwrap();
    tracing_subscriber::fmt()
        .with_ansi(true)
        .with_max_level(tracing::Level::INFO)
        .init();

    let runtime = std::sync::Arc::new(
        tokio::runtime::Builder::new_multi_thread()
            .enable_all()
            .build()
            .expect("failed to build Tokio runtime"),
    );

    let exports = lua.create_table()?;

    let rt = runtime.clone();
    let create_server = lua.create_async_function(move |_, table: LuaTable| {
        let rt = rt.clone();
        async move {
            let host: String = table.get("host")?;
            let port: u16 = table.get("port")?;
            let show_banner: bool = table.get("show_banner")?;

            let web_server: server::WebServer = rt
                .spawn(async move {
                    server::WebServer::new(show_banner, host, port)
                        .await
                        .map_err(LuaError::external)
                })
                .await
                .map_err(LuaError::external)??;
            Ok(web_server)
        }
    })?;

    exports.set("create_server", create_server)?;
    Ok(exports)
}
